#!/usr/bin/env node

/*
 * louvainlinux-site
 * GPL-3.0 License
 *
 * Inspired by the express generator
 * https://github.com/expressjs/generator/blob/master/templates/js/www
 */

/**
 * Module dependencies
 * @private
 */

const http = require('http');
const app = require('../app');
const defaultPort = require('../config/env').server.port;

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || defaultPort);
app.set('port', port);
console.error(port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false
 * @private
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    } else if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event
 * @private
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event
 * @private
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;

    console.log('Listening on ' + bind);
}
